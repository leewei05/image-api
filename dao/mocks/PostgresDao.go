// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	image "github.com/leewei05/image-api"
	mock "github.com/stretchr/testify/mock"
)

// PostgresDao is an autogenerated mock type for the PostgresDao type
type PostgresDao struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *PostgresDao) Create(_a0 *image.Material) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*image.Material) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *PostgresDao) Delete(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *PostgresDao) Get() (*[]image.Material, error) {
	ret := _m.Called()

	var r0 *[]image.Material
	if rf, ok := ret.Get(0).(func() *[]image.Material); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]image.Material)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: _a0
func (_m *PostgresDao) GetOne(_a0 uint) (*image.Material, error) {
	ret := _m.Called(_a0)

	var r0 *image.Material
	if rf, ok := ret.Get(0).(func(uint) *image.Material); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.Material)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *PostgresDao) Update(_a0 *image.Material) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*image.Material) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
